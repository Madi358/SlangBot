from aiogram import Bot, Router
from aiogram.types import Message, CallbackQuery
from core.keyboards.main_menu import main_menu_keyboard, get_random_slang_inline_keyboard, post_random_slang_keyboard, mode_button, mode_menu_keyboard, modes_inline_keyboard, post_answer_inline_keyboard
from core.keyboards.stickers import STICKER_DICE, STICKER_HOURGLASS
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from core.utils.llm_format import clean_llm_response
from core.services.openrouter import get_openrouter_explanation, get_random_slang_openrouter
from core.utils.text import split_queries, format_ai_answer, format_urban_answer, format_arena_answer, format_api_error
from core.services.urban import get_urban_definition_with_translate
from aiogram.filters import Command
from core.settings import settings
from core.utils.fsm_utils import clear_if_slang_state
from core.states import SlangStates

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_handler(message: Message, bot: Bot, state: FSMContext):
    await clear_if_slang_state(state)
    user_name = message.from_user.full_name or message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, <b>{user_name}</b>! –Ø –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–µ–Ω–≥–∞. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û –±–æ—Ç–µ'
async def about_handler(message: Message, bot: Bot, state: FSMContext):
    await clear_if_slang_state(state)
    admin_id = settings.bots.admin_id
    admin_username = settings.bots.admin_username
    text = (
        "<b>–û –±–æ—Ç–µ</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∏ –æ–±—ä—è—Å–Ω—è—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å–ª–µ–Ω–≥.\n"
        "\n<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–ª–µ–Ω–≥–∞ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (AI)\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Urban Dictionary –∏ –Ø–Ω–¥–µ–∫—Å –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞\n"
        "‚Ä¢ –†–µ–∂–∏–º –∞—Ä–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤\n"
        "‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–µ–Ω–≥–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞\n"
        "‚Ä¢ –£–¥–æ–±–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞\n"
        "\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:</b>\n"
        f'<a href="https://t.me/{admin_username}">@{admin_username}</a> (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å)\n'
        "\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É ‚Äî –ø–∏—à–∏—Ç–µ!"
    )
    await message.answer(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–µ–Ω–≥'
async def slang_button_handler(message: Message, bot: Bot, state: FSMContext):
    await clear_if_slang_state(state)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–µ –±–æ–ª–µ–µ 5 –∑–∞ —Ä–∞–∑).",
        reply_markup=main_menu_keyboard
    )
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º (–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ai)
    data = await state.get_data()
    mode = data.get('mode', 'ai')
    await message.answer("–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=mode_button(mode))
    await state.set_state(SlangStates.waiting_for_slang)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª—É—á–∞–π–Ω—ã–π —Å–ª–µ–Ω–≥'
async def random_slang_handler(message: Message, bot: Bot, state: FSMContext):
    await clear_if_slang_state(state)
    await message.answer(
        "–°–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–µ–Ω–≥–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?",
        reply_markup=get_random_slang_inline_keyboard()
    )

# Callback-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–µ–Ω–≥–æ–≤
async def random_slang_callback_handler(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer()
        count = int(callback.data.replace("random_slang_", ""))
        if count > 5:
            await callback.message.answer("–ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–µ–Ω–≥–æ–≤ –∑–∞ —Ä–∞–∑.", reply_markup=main_menu_keyboard)
            return
        wait_msg = await bot.send_sticker(chat_id=callback.message.chat.id, sticker=STICKER_DICE)
        try:
            explanation = await get_random_slang_openrouter(count)
            text = f"<b>–°–ª—É—á–∞–π–Ω—ã–µ —Å–ª–µ–Ω–≥–∏:</b>\n{explanation}"
        except Exception as e:
            text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=wait_msg.message_id)
        text = clean_llm_response(text)
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=post_random_slang_keyboard, parse_mode="HTML")
    except Exception as e:
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=main_menu_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–µ–Ω–≥–∞
async def slang_translate_handler(message: Message, bot: Bot, state: FSMContext):
    # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥
    if message.text in ["üè† –í –º–µ–Ω—é"]:
        return
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–µ—Ä–µ–≤–æ–¥–∞ (ai, urban, arena)
    data = await state.get_data()
    mode = data.get('mode', 'ai')
    queries = split_queries(message.text)
    if not queries:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", reply_markup=main_menu_keyboard)
        await state.clear()
        await state.update_data(mode=mode)
        return
    if len(queries) > 5:
        await message.answer("–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Å–ª–æ–≤/—Ñ—Ä–∞–∑ –∑–∞ —Ä–∞–∑.", reply_markup=main_menu_keyboard)
        await state.clear()
        await state.update_data(mode=mode)
        return
    wait_msg = await bot.send_sticker(chat_id=message.chat.id, sticker=STICKER_HOURGLASS)
    results = []
    for q in queries:
        try:
            if mode == 'ai':
                explanation = await get_openrouter_explanation(q)
                results.append(format_ai_answer(q, explanation))
            elif mode == 'urban':
                definition, example, definition_tr, example_tr = await get_urban_definition_with_translate(q)
                if not definition_tr:
                    results.append(f"<b>{q}</b>: –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Urban Dictionary.")
                else:
                    results.append(format_urban_answer(q, definition_tr, example_tr))
            elif mode == 'arena':
                from asyncio import gather
                ai_task = get_openrouter_explanation(q)
                urban_task = get_urban_definition_with_translate(q)
                ai_result, urban_result = await gather(ai_task, urban_task)
                definition, example, definition_tr, example_tr = urban_result
                if not definition_tr:
                    arena_text = f"<b>{q}</b>\n\nü§ñ <b>AI:</b>\n{ai_result}\n\n<b>Urban+–Ø–Ω–¥–µ–∫—Å:</b> –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Urban Dictionary."
                else:
                    arena_text = format_arena_answer(q, ai_result, definition_tr, example_tr)
                results.append(arena_text)
        except Exception as e:
            results.append(format_api_error(q))
    await bot.delete_message(chat_id=message.chat.id, message_id=wait_msg.message_id)
    text = "\n\n".join(results)
    text = clean_llm_response(text)
    await message.answer(text, parse_mode="HTML")
    await message.answer(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â—ë ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑.\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º.",
        reply_markup=post_answer_inline_keyboard()
    )
    # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ —Å—Ä–∞–∑—É –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    await state.update_data(mode=mode)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def help_handler(message: Message, bot: Bot):
    await message.answer(
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–µ–Ω–≥–∞.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–µ–Ω–≥–æ–≤—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –∞ —Ç–∞–∫–∂–µ —É–∑–Ω–∞–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–µ–Ω–≥–∏.",
        reply_markup=main_menu_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ 'üé≤ –ï—â—ë —Å–ª—É—á–∞–π–Ω—ã–π'
async def random_more_handler(message: Message, bot: Bot):
    await random_slang_handler(message, bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í –º–µ–Ω—é'
async def to_menu_handler(message: Message, bot: Bot, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard
    )

router = Router()

@router.callback_query(lambda c: c.data == "change_mode")
async def change_mode_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=mode_menu_keyboard())
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("set_mode_"))
async def set_mode_callback(callback: CallbackQuery, state: FSMContext):
    mode = callback.data.replace("set_mode_", "")
    await state.update_data(mode=mode)
    await callback.message.edit_reply_markup(reply_markup=mode_button(mode))
    await callback.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω: {mode}")

@router.callback_query(lambda c: c.data == "about_modes")
async def about_modes_callback(callback: CallbackQuery):
    text = (
        "<b>–†–µ–∂–∏–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞:</b>\n\n"
        "ü§ñ <b>AI</b> ‚Äî –Ω–µ–π—Ä–æ—Å–µ—Ç—å –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–ª–µ–Ω–≥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
        "üìö <b>Urban+–Ø–Ω–¥–µ–∫—Å</b> ‚Äî –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–µ—Ä—ë—Ç—Å—è –∏–∑ Urban Dictionary –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫.\n\n"
        "‚öîÔ∏è <b>–ê—Ä–µ–Ω–∞</b> ‚Äî –±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –∏ Urban+–Ø–Ω–¥–µ–∫—Å, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ —Å—Ä–∞–≤–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã."
    )
    await callback.answer()
    await callback.message.answer(text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' (inline)
@router.callback_query(lambda c: c.data == "back_to_translate")
async def back_to_translate_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â—ë ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑.\n\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º.",
        reply_markup=post_answer_inline_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ '–†–µ–∂–∏–º—ã'
@router.callback_query(lambda c: c.data == "modes_menu")
async def modes_menu_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=modes_inline_keyboard())
    await callback.answer()
